Chris Schnaars - Sound Experiments
BUBBLE TONES 2

Goal:
Similar idea to Bubble Tones 1, but now the collisions create a tone that's the combination of their current tones.

Process:
1. Need to save the tone each bubble currently has.

Process for UI:
1. Figure out how to set the height of the header via javascript
2. Figure out how to make the UI behavior work (dropdown)
3. Figure out how to populate the list of dropdown content dynamically - and where to do this
4. Figure out how to make selection actually control everything

Challenges:
1. is there anyway to keep tones playing even after a bubble has triggered a new tone?
2. how to extend the amount of time that the border displays
3. figuring out what code to do where. don't want to burn computing power. draw loop should do the minimal amount of work.
4. what needs to be an object? how to organize objects? does each collision shape need to be its own object? or should i try to combine?
5. figuring out how to structure the code for shapes - are they objects?
6. took me a while to make the height of the header something to set in javascript. the main issue was that the code was running before the page loaded. added the body onload call to fix.
7. How to get the hover functionality working...
8. Javascript UI
  - how  to populate things dynamically via javascript (i.e. dropdown list)
9. Getting the UI to display was the easy party. Figuring out the logic to update the values of bubbles was difficult. For instance, the tone of each bubble changes based on which wall it hit last, so you need to know that value in order to switch it to the corresponding value in the new key.
10. figuring out the physics of increasing the speed - need to adjust the velocity of each bubble. had to go back to nature of code stuff. in the end it just being a bit of math to figure out what to multiply the velocity by, but it increased my understanding of vector math.

Other ideas:
1. give control to change key?
2. unify and give control of speed?
4. allow for drag and dropping of shapes?
5. Maybe move some of the check edges stuff into it's own function?
6. timer could be a function with id as input
7. make the border an object
8. Combination tones and undertones?
  - https://en.wikipedia.org/wiki/Undertone_series
9. pan sounds based on location in screen?

What controls could the user have?
- change key
- change scale (major, minor, etc.)
- change speed of bubbles (if not all randomized)
- change size of bubbles?
- drag and drop bounce shapes

Notes:
1. I changed all shapes to circles for a moment. They used to be other shapes.
  - want to get something up
  - all circles may be better?
  - use circle object

2. Can't figure out how to do multiple directions of bubbles.
3. I wonder if there's a better way to handle radio buttons. Right now I'm starting with a hard-coded value that matches my default selection. (ie 220 for key of A). I could probably figure out what the current selection is and use that.
4. Taking this from sketch to full application is a lot of addtional work. Just setting all of the controls up to work in all browsers is hard enough. Also add in the design of those controls.
5. This is not a perfect thing. But it's a finished thing that works (for the most part) and that taught me a ton about how to create these.
6. Some of my favorite things are the hidden parts: the bubbles are vectors that we could end up adding forces to, and are calculating their position after bounce. The circles are aware of where the other circles are, and will not overlap.
